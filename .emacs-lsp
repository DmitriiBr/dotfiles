;; Im NOT using this in main config]
;; Not using LSP at all

(use-package tree-sitter
  :ensure t
  :config
  (use-package tree-sitter-langs
    :ensure t
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)))

;; Setting indentation for ts, js, tsx, js, ocaml to 4
(setq typescript-ts-mode-indent-offset 4)
(setq tsx-ts-mode-indent-offset 4)

(use-package treesit
  :mode (("\\.tsx\\'" . tsx-ts-mode)
         ("\\.js\\'"  . typescript-ts-mode)
         ("\\.mjs\\'" . typescript-ts-mode)
         ("\\.mts\\'" . typescript-ts-mode)
         ("\\.cjs\\'" . typescript-ts-mode)
         ("\\.ts\\'"  . typescript-ts-mode)
         ("\\.jsx\\'" . tsx-ts-mode)))

;; You need this mappings to add language-grammars to treesit list and install them
;; You can call list for installation using M-x treesit-install-language-grammar
(setq treesit-language-source-alist
      '(
        (cmake "https://github.com/uyha/tree-sitter-cmake")
        (css "https://github.com/tree-sitter/tree-sitter-css")
        (elisp "https://github.com/Wilfred/tree-sitter-elisp")
        (go "https://github.com/tree-sitter/tree-sitter-go")
        (html "https://github.com/tree-sitter/tree-sitter-html")
        (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
        (json "https://github.com/tree-sitter/tree-sitter-json")
        (toml "https://github.com/tree-sitter/tree-sitter-toml")
        (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
        (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")))

;; LSP MODE IS DISABLED!!!
;; Lsp start
(defun add-lsp-hooks (lsp)
  "Add lsp-mode for this major modes."
  (tsx-ts-mode . lsp)
  (typescript-ts-mode . lsp)
  (js-ts-mode . lsp))

;; Setting up an LSP mode
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-enable-on-type-formatting nil)
  (setq lsp-log-io nil)
  (setq lsp-enable-symbol-highlighting nil)
  (setq lsp-headerline-breadcrumb-enable nil)  ; Optional, I like the breadcrumbs
  (setq lsp-eldoc-enable-hover nil)
  (setq lsp-enable-indentation nil)
  (setq lsp-enable-text-document-color nil)
  (setq lsp-headerline-breadcrumb-enable nil)  ; Optional, I like the breadcrumbs
  (setq lsp-semantic-tokens-enable nil)
  (setq lsp-signature-render-documentation nil)
  (setq lsp-signature-auto-activate nil) ;; you could manually request them via `lsp-signature-activate`
  (setq lsp-modeline-code-actions-enable nil)
  (setq lsp-eldoc-enable-hover nil)
  (setq lsp-modeline-diagnostics-enable nil)
  (setq lsp-signature-auto-activate nil)
  (setq lsp-signature-render-documentation nil)
  (setq lsp-completion-provider :none)
  ;; Not adding now :hook (add-lsp-hooks lsp)
  :commands lsp)

(use-package lsp-ui
  :init
  (setq lsp-ui-sideline-show-hover nil)
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-position 'at-point)
  (setq lsp-ui-doc-max-width 70)
  (setq lsp-ui-sideline-enable nil)
  (setq lsp-ui-sideline-show-hover nil)
  (setq lsp-ui-sideline-show-code-actions nil)
  :commands lsp-ui-mode)
;; Lsp end


;; Flycheck start
(use-package flycheck
  :ensure t
  :demand t
  :custom
  (setq flycheck-auto-display-errors-after-checking nil)
  :config
  (global-flycheck-mode)
  (with-eval-after-load 'flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-inline-mode)))
;; Flycheck end
