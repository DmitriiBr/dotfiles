#+TITLE: Gnu Emacs Config
#+AUTHOR: Dmitrii Borisov
#+DESCRIPTION: Personal Emacs conifg.
#+STARTUP: showeveryting
#+OPTIONS: toc:2

* IMPORTANT PROGRAMS TO LOAD FIRST

** MELPA Package manager
*** Melpa package manager
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+end_src

*** Use package
#+begin_src emacs-lisp
(eval-when-compile (require 'use-package))
#+end_src

** Appearance defaults
*** Desable minibars, scrollbars etc.
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)

(scroll-bar-mode 0)
(menu-bar-mode 0)
(tool-bar-mode 0)
(column-number-mode 1)
(show-paren-mode 1)

(global-display-line-numbers-mode)
(setq display-line-numbers 'relative)

(setq make-backup-files nil)
#+end_src
*** Global auto revert mode
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

*** Font height and scale
#+begin_src emacs-lisp
(set-face-attribute 'default nil :height 140)
(set-face-attribute 'default nil :font "Fira Code" :height 140)
#+end_src

** Keybindings
*** Newlines insertion
#+begin_src emacs-lisp
;; Insert new line below current line
(global-set-key (kbd "<C-return>") (lambda ()
                   (interactive)
                   (end-of-line)
                   (newline-and-indent)))
;; Insert new line above current line

(global-set-key (kbd "<C-S-return>") (lambda ()
                       (interactive)
                       (previous-line)
                       (end-of-line)
                       (newline-and-indent)))

#+end_src

** Ivy, counsel, ido modes
+ Ido - out of the box standard Emacs completion engine
+ Ivy - external completion engine
+ Counsel - another extension for Ivy completion engine

*** Ido mode
#+begin_src emacs-lisp
(ido-mode t)
#+end_src

*** Ivy (counsel)
#+begin_src emacs-lisp
(use-package counsel
	:after ivy
	:diminish
	:config 
	  (counsel-mode)
	  (setq ivy-initial-inputs-alist nil))

(use-package ivy
	:ensure t
	:diminish
	:bind
	(("C-c C-r" . ivy-resume)
	("C-x B" . ivy-switch-buffer-other-window))
	:custom
	(setq ivy-use-virtual-buffers t)
	(setq enable-recursive-minibuffers t)
	(setq ivy-count-format "(%d/%d) ")
	:config
	(ivy-mode))
#+end_src

** Git
*** Magit
#+begin_src emacs-lisp
(require 'magit)
#+end_src

*** Git gutter
#+begin_src emacs-lisp
(require 'git-gutter)(
global-git-gutter-mode t)
#+end_src

*** Git gutter fringe
#+begin_src emacs-lisp
(require 'git-gutter-fringe)
(define-fringe-bitmap 'git-gutter-fr:added [#b11100000] nil nil '(center repeated))
(define-fringe-bitmap 'git-gutter-fr:modified [#b11100000] nil nil '(center repeated))
(define-fringe-bitmap 'git-gutter-fr:deleted
  [#b10000000
   #b11000000
   #b11100000
   #b11110000] nil nil 'bottom)
#+end_src

** Evil Mode
#+begin_src emacs-lisp
(require 'evil)
(evil-mode -1)
#+end_src

** Modes
*** Typescript mode
#+begin_src emacs-lisp
(use-package typescript-mode
	:config
	(add-hook 'typescript-mode-hook (lambda () (typescript-mode 1)))
)
#+end_src

*** Web mode
#+begin_src emacs-lisp
(use-package web-mode
	  :config
    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode)))
#+end_src

*** JS2 mode
#+begin_src emacs-lisp
(use-package js2-mode)
#+end_src

*** Rust mode
#+begin_src emacs-lisp
(use-package rust-mode)
#+end_src

*** Dockerfile mode
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src

*** Org mode bullets
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

*** Markdown mode
#+begin_src emacs-lisp
(use-package markdown-mode
	:config
	(add-hook 'markdown-mode-hook (lambda () (markdown-mode 1))))
#+end_src

*** Yaml mode
#+begin_src emacs-lisp
(use-package yaml-mode
	:config
	(add-hook 'yaml-mode-hook (lambda () (yaml-mode 1))))
#+end_src

** Apheleia (prettier and other formatting, linting toold)
+ Add prettier package for emacs
+ Add package to use prettier config from local .prettierrc

#+begin_src emacs-lisp
(use-package apheleia
    :ensure t
    :config
    (apheleia-global-mode +1)
    (add-hook 'typescript-mode-hook 'prettier-rc-mode)
    (add-hook 'js2-mode-hook 'prettier-rc-mode)
    (add-hook 'web-mode-hook 'prettier-rc-mode))
#+end_src

*** Add node_modules path
+ Use node_modules and pacakges from local project directory

#+begin_src emacs-lisp
(use-package add-node-modules-path)
#+end_src

*** Eslint rc
#+begin_src emacs-lisp
(use-package eslint-rc
	  :ensure t
	  :config
    (add-hook 'typescript-mode-hook 'eslint-rc-mode)
    (add-hook 'js2-mode-hook 'eslint-rc-mode)
    (add-hook 'web-mode-hook 'eslint-rc-mode))
#+end_src

** Flycheck
+ Checks your code JIT
+ Also added inline-flycheck-mode

#+begin_src emacs-lisp
(use-package flycheck
	:ensure t
	:defer t
	:diminish
	:config
  	(global-flycheck-mode)
  	(with-eval-after-load 'flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-inline-mode)))
#+end_src

** Treesitter and Treesitter langs
+ Use tree sitter as languare syntax parser
+ Adding tres sitter langs to support syntax highlighting
+ Creating hook to enable tree sitter highilighting on every buffer open possible

#+begin_src emacs-lisp
(use-package tree-sitter
	:ensure t
	:diminish
	:config
	(use-package tree-sitter-langs
	    :ensure t
	    :diminish
        :config
        (global-tree-sitter-mode)
        (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)))
#+end_src

** Utility packages
*** Flycheck rust
#+begin_src emacs-lisp
(use-package flycheck-rust
	:config
	(with-eval-after-load 'rust-mode
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+end_src

*** Eglot
#+begin_src emacs-lisp
(use-package eglot
	:config
	(add-hook 'rust-mode-hook 'eglot-ensure))
#+end_src

*** Yasnippet
#+begin_src emacs-lisp
(require 'yasnippet)
(setq yas-triggers-in-field nil)
#+end_src

*** Company
+ Defining `global-company-mode`
+ Setting default keybindings to `C-n` and `C-p` for company selection

#+begin_src emacs-lisp
(use-package company
	:config
	(global-company-mode)
	:bind (:map company-active-map
		("C-n" . company-select-next-or-abort)
		("C-p" . company-select-previous-or-abort)))
#+end_src

** Diminish
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

** Doom-modeline 
#+begin_src emacs-lisp
(use-package doom-modeline
	:ensure t
	:init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 35      
          doom-modeline-bar-width 5
          doom-modeline-persp-name t   
          doom-modeline-persp-icon t))
#+end_src

** Tide
#+begin_src emacs-lisp
(use-package tide
	:init 
	(defun setup-tide-mode ()
  	(interactive)
  	(tide-setup)
  	(flycheck-mode +1)
  	(setq flycheck-check-syntax-automatically '(save mode-enabled))
  	(eldoc-mode +1)
  	(tide-hl-identifier-mode +1)
	;; company is an optional dependency. You have to
  	;; install it separately via package-install
  	;; `M-x package-install [ret] company`
  	(company-mode +1))
	:config
	;; aligns annotation to the right hand side
	(setq company-tooltip-align-annotations t)
	;; if you use typescript-mode
	(add-hook 'typescript-mode-hook #'setup-tide-mode))

;; formats the buffer before saving
;; (add-hook 'before-save-hook 'tide-format-before-save)
#+end_src


